# todo.go
package models

import "MyTodoList/config"

type Todo struct {
	ID        uint   `gorm:"primaryKey" json:"id"`
	Title     string `json:"title"`
	Content   string `json:"content"`
	Status    int    `json:"status"` // 0: 未完成, 1: 已完成
	CreatedAt int64  `json:"createdAt"`
	StartTime int64  `json:"startTime"`
	EndTime   int64  `json:"endTime"`
	UserID    uint   `json:"userId"`
}

func CreateTodo(todo *Todo) error {
	return config.DB.Create(todo).Error
}

func GetTodosByUser(userID uint, status int, keyword string, offset int, limit int) ([]Todo, int64, error) {
	var todos []Todo
	var count int64
	query := config.DB.Where("user_id = ?", userID)
	if status >= 0 {
		query = query.Where("status = ?", status)
	}
	if keyword != "" {
		query = query.Where("title LIKE ?", "%"+keyword+"%")
	}
	err := query.Offset(offset).Limit(limit).Find(&todos).Error
	query.Count(&count)
	return todos, count, err
}


# user.go
package models

import "MyTodoList/config"

type User struct {
	ID       uint   `gorm:"primaryKey" json:"id"`
	Username string `gorm:"unique;not null" json:"username"`
	Password string `gorm:"not null" json:"password"`
}

func CreateUser(user *User) error {
	return config.DB.Create(user).Error
}

func GetUserByUsername(username string) (*User, error) {
	var user User
	err := config.DB.Where("username = ?", username).First(&user).Error
	return &user, err
}


# routes.go
package routes

import (
	"MyTodoList/controllers"
	"MyTodoList/middlewares"
	"github.com/gin-gonic/gin"
)

func SetupRouter() *gin.Engine {
	r := gin.Default()
	userGroup := r.Group("/api/user")
	{
		userGroup.POST("/register", controllers.Register)
		userGroup.POST("/login", controllers.Login)
	}
	todoGroup := r.Group("/api/todos").Use(middlewares.AuthMiddleware())
	{
		todoGroup.POST("/", controllers.CreateTodo)
		todoGroup.GET("/", controllers.GetTodos)
	}
	return r
}

# todoController.go
package controllers

import (
	"MyTodoList/models"
	"github.com/gin-gonic/gin"
	"net/http"
	"strconv"
)

func CreateTodo(c *gin.Context) {
	userID, _ := c.Get("userID")
	var todo models.Todo
	if err := c.ShouldBindJSON(&todo); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "参数错误"})
		return
	}
	todo.UserID = userID.(uint)
	if err := models.CreateTodo(&todo); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"msg": "创建失败"})
		return
	}
	c.JSON(http.StatusOK, gin.H{"msg": "创建成功"})
}

func GetTodos(c *gin.Context) {
	userID, _ := c.Get("userID")
	status, _ := strconv.Atoi(c.Query("status"))
	keyword := c.Query("keyword")
	page, _ := strconv.Atoi(c.DefaultQuery("page", "1"))
	limit, _ := strconv.Atoi(c.DefaultQuery("limit", "10"))
	offset := (page - 1) * limit
	todos, total, _ := models.GetTodosByUser(userID.(uint), status, keyword, offset, limit)
	c.JSON(http.StatusOK, gin.H{"items": todos, "total": total})
}

# userController.go

package controllers

import (
	"MyTodoList/config"
	"MyTodoList/models"
	"github.com/gin-gonic/gin"
	"golang.org/x/crypto/bcrypt"
	"net/http"
)

func Register(c *gin.Context) {
	var user models.User
	if err := c.ShouldBindJSON(&user); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "参数错误"})
		return
	}
	hashedPassword, _ := bcrypt.GenerateFromPassword([]byte(user.Password), bcrypt.DefaultCost)
	user.Password = string(hashedPassword)
	if err := models.CreateUser(&user); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"msg": "注册失败"})
		return
	}
	c.JSON(http.StatusOK, gin.H{"msg": "注册成功"})
}

func Login(c *gin.Context) {
	var req struct {
		Username string `json:"username"`
		Password string `json:"password"`
	}
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "参数错误"})
		return
	}
	user, err := models.GetUserByUsername(req.Username)
	if err != nil || bcrypt.CompareHashAndPassword([]byte(user.Password), []byte(req.Password)) != nil {
		c.JSON(http.StatusUnauthorized, gin.H{"msg": "用户名或密码错误"})
		return
	}
	token, _ := config.GenerateToken(user.ID)
	c.JSON(http.StatusOK, gin.H{"msg": "登录成功", "token": token})
}

# config.go
package config

import (
	"gorm.io/driver/mysql"
	"gorm.io/gorm"
	"log"
)

var DB *gorm.DB

func InitDB() {
	dsn := "root:123456@tcp(127.0.0.1:3306)/todolist?charset=utf8mb4&parseTime=True&loc=Local"
	var err error
	DB, err = gorm.Open(mysql.Open(dsn), &gorm.Config{})
	if err != nil {
		log.Fatal("数据库连接失败: ", err)
	}
}
